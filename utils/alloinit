#! /bin/bash

if [ "${BASH_VERSINFO:-0}" -lt 3 ] ; then
    >&2 echo "$0 requires Bash 3 or greater."
    exit 1
fi

# Dependencies needed to run `alloinit`.
alloinit_deps=( basename find fold git ln mkdir rm rmdir touch tput )
for dep in "${alloinit_deps[@]}" ; do
    if ! [[ "$(command -v "$dep")" ]] ; then
        >&2 echo "$0 requires $dep."
        exit 1
    fi
done

# Propagate non-zero error codes in pipelines.
set -o pipefail

# Data directory.
data_home="${XDG_DATA_HOME:-$HOME/.local/share}/alloinit"

# Color support if outputting to a terminal with color.
if [[ -t 1 ]] && [[ -n "$(tput colors)" ]] && [[ -z ${NO_COLOR+blank} ]] ; then
    bold="$(tput bold)"
    underline="$(tput smul)"
    normal="$(tput sgr0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
fi

# Name of the script.
name="$(basename $0)"
# Version.
version='0.2.0'

# Usage information.
function show_usage() {
    local width="$(tput cols)"
    # Color shortcuts.
    local n="$normal"
    local b="$blue"
    local u="$underline"
    local g="$green"
    local y="$yellow"
    fold -s -w $((width > 80 ? 80 : width)) <<EOF
$g$0$n $version
One-step Allolib project initializer.

${y}Usage$n:
    $g$name <proj>$n                   Start a project in <proj>.
    $g$name -u <proj>$n                Update Allolib in <proj>.

    $g$name -S [-l <libs>] <proj>$n    Start a project in <proj> using
                                      shared Allolib in <libs>.
    $g$name -S [-l <libs>] -r <proj>$n Relink shared Allolib to <proj>.
    $g$name -S [-l <libs>] -u$n        Update shared Allolib in <libs>.
    $g$name -S [-l <libs>] -L$n        Install shared Allolib in <libs>.

${y}Options$n:
    $g-l <libs>$n   Specify the directory where Allolib and its extensions
                are installed. Defaults to <proj>. In shared mode, defaults to
                $g\$XDG_DATA_HOME/alloinit/$n. The value of <libs> controls
                the behavior of $name.
                [Default: $g<proj>$n or $g$data_home$n]
    $g-u$n          Update Allolib and its extensions.
    $g-h$n          Show this help text.
    $g-V$n          Show the version.
${y}Shared Mode Options$n:
    $g-S$n          Operate in shared dependency mode. Projects created in
                shared dependency mode will use symbolic links to share a
                user-wide installation of Allolib and its extensions, instead
                of adding them as submodules to <proj>. In shared mode, <libs>
                will default to $g\$XDG_DATA_HOME/alloinit/$n instead of the
                current working directory.
    $g-r$n          Relink dependencies. Re-creates symbolic links in <proj>
                so that they point to the shared Allolib in <libs>.
    $g-L$n          Install Allolib and its extensions in <libs> without
                creating a project.

${y}Full Documentation$n:
EOF
    echo "    $b${u}https://github.com/Allosphere-Research-Group/allotemplate/blob/master/utils/alloinit.md$n"
}

if [[ $# -lt 1 ]] ; then
    show_usage
    exit 0
fi

# Positional arguments.
args=()
# Subcommand to execute.
subcommand=init
while [[ $OPTIND -le $# ]] ; do
    if getopts 'l:ruLShV' opt ; then
        case "$opt" in
        l)
            libs="$OPTARG"
            ;;
        r)
            subcommand=relink
            ;;
        u)
            subcommand=update
            ;;
        L)
            subcommand=installdeps
            ;;
        S)
            shared=1
            ;;
        h)
            show_usage
            exit 0
            ;;
        V)
            echo "$version"
            exit 0
            ;;
        ?)
            exit 1
            ;;
        esac
    else
        # Store positional argument.
        args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

# Log a success message to stderr, in bold green if the output is a terminal
# that supports color.
function success() { >&2 echo "$bold$green$*$normal" ; }
# Log an info message to stderr, in blue if the output is a terminal that
# supports color.
function info() { >&2 echo "$blue$*$normal" ; }
# Log a warning message to stderr, in yellow if the output is a terminal that
# supports color.
function warn() { >&2 echo "$yellow$*$normal" ; }
# Log an error message to stderr, in bold red if the output is a terminal that
# supports color.
function error() { >&2 echo "$bold$red$*$normal" ; }

# Directory to set up allolib project in.
dest="${args[0]}"
# Directory to keep shared dependencies.
if [[ -n $shared ]] ; then
    libs="${libs:-$data_home}"
elif [[ -z "$libs" ]] ; then
    # Not in shared mode, `libs` defaults to `dest`.
    libs="$dest"
fi

if [[ $subcommand =~ (init|relink) ]] && [[ -z "$dest" ]] ||
    [[ $subcommand = update ]] && [[ -z "$libs" ]] ; then
    error 'ERROR: Not enough arguments.'
    >&2 show_usage
    exit 1
fi

# Whether the dependency directory already existed before running the script.
libs_existed="$(test -d "$libs" ; echo $?)"
# Dependencies shared between allolib projects.
deps=(
    allolib
    al_ext
)

# Temporary file to indicate that directory was created by alloinit.
tmpfile=.alloinit.tmp

# Clean up in case of early abort.
function cleanup() {
    if [[ $subcommand == init ]] ; then
        warn 'Could not finish; cleaning up.'
        for dep in "${deps[@]}" ; do
            if [[ -f "$libs/.$dep$tmpfile" ]] ; then
                info "Removing dependency \`$libs/$dep\`."
                rm -rf "$libs/$dep" "$libs/.$dep$tmpfile"
            fi
        done

        # Remove lib if it did not exist prior to running alloinit.
        if [[ -d "$libs" ]] && ! [[ "$libs_existed" -eq 0 ]] &&
            [[ -n "$(find "$libs" -maxdepth 0 -type d -empty 2> /dev/null)" ]] ; then
            rmdir "$libs"
        fi

        if [[ -f "$dest/$tmpfile" ]] ; then
            info "Removing project \`$dest\`."
            rm -rf "$dest"
        fi
    fi
}

function onexit() {
    [[ $? -gt 0 ]] && cleanup

    [[ $subcommand == init ]] && rm -f "$dest/$tmpfile"
}

trap onexit EXIT


# Install allolib dependencies to $lib.
function install_dependencies() {
    mkdir -p "$libs" || exit $?
    for dep in "${deps[@]}" ; do
        if [[ ! -d "$libs/$dep" ]] ; then
            touch "$libs/.$dep$tmpfile" || exit $?
            info "Retrieving dependency \`$dep\`:"
            git clone "git@github.com:Allosphere-Research-Group/$dep.git" "$libs/$dep" \
                --recurse-submodules \
                --depth 1 \
                --progress 2>&1 || exit $?
            rm -f "$libs/.$dep$tmpfile" || exit $?
        fi
    done
}

# Link dependencies to a project. If the first argument is set, also amends the
# `.gitignore` to ignore the dependency links.
function link_dependencies() {
    if [[ -n $shared ]] ; then
        info 'Linking dependencies.'
        local write_gitignore=$1
        [[ -z $write_gitignore ]] || printf "\n\n# allolib dependencies\n" >> "$dest/.gitignore"
        for dep in "${deps[@]}" ; do
            if ! [[ -d "$libs/$dep" ]] ; then
                error "\`$libs/$deps\` is not a directory."
                exit 1
            fi
            loc="$(cd "$libs/$dep" && pwd)" || exit $?
            [[ -z $write_gitignore ]] || printf "/$dep\n" >> "$dest/.gitignore"
            info "Linking dependency \`$dep\` to \`$loc\`."
            ln -sf "$loc" "$dest" || exit $?
        done
    fi
}

# Add dependencies as submodules to a project. Not used when the -s (shared)
# flag is passed.
function add_dependencies_as_submodules() (
    cd "$1"
    info "Adding dependencies as submodules in \`$1\`."
    for dep in "${deps[@]}" ; do
        git submodule add "git@github.com:Allosphere-Research-Group/$dep.git" \
            2>&1 || exit $?
    done
    git submodule update --init --recursive --depth 1 2>&1 || exit $?
)

# Execute subcommand:
case $subcommand in
relink)
    info "Relinking dependencies in project \`$dest\`."
    # Install and link dependencies again, but do not write to `.gitignore`.
    install_dependencies || exit $?
    link_dependencies || exit $?
    success "Successfully relinked dependencies in \`$dest\`!"
    ;;
update)
    # Update existing libraries.
    info "Updating existing Allolib and extensions in \`$libs\`."
    for dep in "${deps[@]}" ; do
        if ! [[ -d "$libs/$dep" ]] ; then
            error "ERROR: \`$dep\` not installed in \`$libs\`."
            exit 1
        fi
        info "Updating dependency \`$dep\`:"
        (
            cd "$libs/$dep"
            # Sync upstream changes to the URL of submodules.
            git submodule sync --recursive || exit $?
            # Update submodules.
            git submodule update --recursive --progress || exit $?
            # Pull changes.
            git pull --progress || exit $?
        ) 2>&1 || exit $?
    done
    success "Successfully updated Allolib dependencies in \`$libs\`!"
    ;;
installdeps)
    if ! [[ -n $shared ]] ; then
        error 'ERROR: Not valid outside of shared mode.'
        >&2 show_usage
        exit 1
    fi
    info "Installing Allolib and extensions to \`$libs\`"
    install_dependencies || exit $?
    success "Successfully installed Allolib dependencies to \`$libs\`!"
    ;;
init)
    if [[ -d "$dest" ]] ; then
        error "Directory \`$dest\` already exists."
        exit 1
    fi

    info "Initializing $([[ -n $shared ]] && echo 'shared ')Allolib project in \`$dest\`:"
    mkdir -p "$dest" || exit $?
    # Mark that $dest is currently being initialized. Used for checking whether
    # to delete it in case of an early exit.
    touch "$dest/$tmpfile" || exit $?
    (
        cd "$dest"
        # Initialize an empty repository.
        git init
        # Pull changes from `allotemplate` as its own remote.
        git remote add allotemplate git@github.com:Allosphere-Research-Group/allotemplate.git \
            || exit $?
        git pull allotemplate master || exit $?
    ) 2>&1 || exit $?

    # Install dependencies, link them, and write their names to the `.gitignore`.
    if [[ -n $shared ]] ; then
        install_dependencies || exit $?
        link_dependencies write_gitignore || exit $?
    else
        add_dependencies_as_submodules "$dest" || exit $?
    fi

    info 'Configuring allolib project.'
    (cd "$dest" && ./configure.sh ) 2>&1 || exit $?

    info 'Removing `init.sh`. (No longer needed.)'
    rm "$dest/"init.sh || exit $?

    success "Successfully initialized Allolib project \`$dest\`!"
    ;;
esac
